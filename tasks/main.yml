---
- name: set variable overrides
  set_fact:
    _gitlab_requirements: "{{ gitlab_requirements | default(gitlab_requirements_default | sorted_get(overrides)) }}"
  vars:
    overrides:
      - "{{ ansible_distribution | lower }}-{{ ansible_distribution_release | lower }}"
      - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version }}"
      - "{{ ansible_distribution | lower }}"
      - "{{ ansible_os_family | lower }}"
      - "default"
  tags:
    - always

- name: load installation script url
  set_fact:
    gitlab_repository_installation_script_url: "{{ gitlab_repository_installation_script_url_default[ansible_os_family | lower] }}"
  when: gitlab_repository_installation_script_url is not defined

- name: check existing configuration
  stat:
    path: /etc/gitlab/gitlab.rb
  register: gitlab_config_file

- name: check existing installation
  stat:
    path: /usr/bin/gitlab-ctl
  register: gitlab_file

- name: install gitlab dependencies
  package:
    name: "{{ _gitlab_requirements }}"
    state: "{{ gitlab_package_state }}"

- name: create temporary target directory
  tempfile:
    state: directory
    prefix: gitlab
  register: tmpdir
  changed_when: false

- name: register installation script location
  set_fact:
    install_script: "{{ tmpdir.path }}/gitlab_install_repository.sh"

- name: download gitlab repository installation script
  get_url:
    url: "{{ gitlab_repository_installation_script_url }}"
    dest: "{{ install_script }}"
    validate_certs: "{{ gitlab_download_validate_certs }}"
    mode: 755
  when: not gitlab_file.stat.exists

- name: install gitlab repository
  command: "{{ install_script }}"
  when: not gitlab_file.stat.exists

- block:

    - name: import apt gpg key
      apt_key:
        url: https://packages.gitlab.com/gpg.key

    - name: update apt package cache
      apt:
        update_cache: true

    - name: update ca certificates
      command: update-ca-certificates
      changed_when: false

  when: ansible_os_family | lower == 'debian'

- name: install gitlab
  package:
    name: "{{ gitlab_package | default(gitlab_package_default) }}"
  notify: restart gitlab-runsvdir service

- name: flush handlers
  meta: flush_handlers

- name: manage gitlab configuration
  template:
    src: "{{ gitlab_conf_template }}"
    dest: "{{ gitlab_conf_path }}"
    owner: "{{ gitlab_user }}"
    group: "{{ gitlab_group }}"
    mode: 0600
  notify: reconfigure gitlab

- name: reconfigure gitlab (first run)
  command: gitlab-ctl reconfigure
  args:
    creates: /var/opt/gitlab/bootstrapped
  when: not gitlab_file.stat.exists

- name: remove temporary directories
  file:
    path: "{{ tmpdir.path }}"
    state: absent
  changed_when: false

- block:

    - name: create gitlab backup script
      template:
        src: "{{ gitlab_backup_template }}"
        dest: "{{ gitlab_backup_bin }}"
        owner: root
        group: root
        mode: 0750
      tags:
        - backup
        - restore

    - name: create gitlab restore script
      template:
        src: "{{ gitlab_restore_template }}"
        dest: "{{ gitlab_restore_bin }}"
        owner: root
        group: root
        mode: 0750
      tags:
        - backup
        - restore

    - name: manage gitlab backup cronjob
      cron:
        name: gitlab-backup-create
        job: "{{ gitlab_backup_bin }}"
        hour: "{{ gitlab_cron_hour_setting }}"
        minute: "{{ gitlab_cron_minute_setting }}"

      tags:
        - backup
        - restore

    - name: create gitlab backup motd pointers for debian
      copy:
        dest: /etc/update-motd.d/99-gitlab
        content: |
          #!/usr/bin/env bash
          echo
          echo run gitlab-backup to manually force gitlab backup creation
          echo run gitlab-restore to manually restore latest gitlab backup
          echo
        mode: 0755
      when: ansible_os_family | lower == 'debian'
      tags:
        - backup
        - restore

    - name: create gitlab backup motd pointers for redhat
      copy:
        dest: /etc/profile.d/99-gitlab
        content: |
          #!/usr/bin/env bash
          echo
          echo run gitlab-backup to manually force gitlab backup creation
          echo run gitlab-restore to manually restore latest gitlab backup
          echo
        mode: 0755
      when: ansible_os_family | lower == 'redhat'
      tags:
        - backup
        - restore

  when: gitlab_backup | default(True)
